.TH backintime-config 1 "Sep 2024" "version 1.5.3-dev.3e80feee" "USER COMMANDS"
.SH NAME
config \- Back In Time configuration file.
.SH SYNOPSIS
~/.config/backintime/config
.br
/etc/backintime/config
.SH DESCRIPTION
Back In Time was developed as pure GUI program and so most functions are only usable with \fBbackintime-qt\fR. But it is possible to use Back In Time e.g. on a headless server. You have to create the configuration file (~/.config/backintime/config) manually. Look inside /usr/share/doc/backintime\-common/examples/ for examples.
.PP
The configuration file has the following format:
.br
keyword=arguments
.PP
Arguments don't need to be quoted. All characters are allowed except '='.
.PP
Run 'backintime check-config' to verify the configfile, create the snapshot folder and crontab entries.
.SH POSSIBLE KEYWORDS
.IP "\fIglobal.hash_collision\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Internal value used to prevent hash collisions on mountpoints. Do not change this.
.PP
Default: 0
.RE

.IP "\fIglobal.language\fR" 6
.RS
Type: str       Allowed Values: ISO 639 language codes
.br
Language code (ISO 639) used to translate the user interface. If empty the operating systems current local is used. If 'en' the translation is not active and the original English source strings are used. It is the same if the value is unknown.
.PP
Default: 
.RE

.IP "\fIglobal.use_flock\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Prevent multiple snapshots (from different profiles or users) to be run at the same time.
.PP
Default: false
.RE

.IP "\fIprofile<N>.snapshots.mode\fR" 6
.RS
Type: str       Allowed Values: local|local_encfs|ssh|ssh_encfs
.br
Use mode (or backend) for this snapshot. Look at 'man backintime' section 'Modes'.
.PP
Default: local
.RE

.IP "\fIprofile<N>.snapshots.path\fR" 6
.RS
Type: str       Allowed Values: absolute path
.br
Where to save snapshots in mode 'local'. This path must contain a folderstructure like 'backintime/<HOST>/<USER>/<PROFILE_ID>'.
.PP

.RE

.IP "\fIprofile<N>.snapshots.path.host\fR" 6
.RS
Type: str       Allowed Values: local hostname
.br
Set Host for snapshot path.
.PP

.RE

.IP "\fIprofile<N>.snapshots.path.user\fR" 6
.RS
Type: str       Allowed Values: local username
.br
Set User for snapshot path.
.PP

.RE

.IP "\fIprofile<N>.snapshots.path.profile\fR" 6
.RS
Type: str       Allowed Values: 1-99999
.br
Set Profile-ID for snapshot path
.PP
Default: current Profile-ID
.RE

.IP "\fIprofile<N>.snapshots.ssh.path\fR" 6
.RS
Type: str       Allowed Values: absolute or relative path
.br
Snapshot path on remote host. If the path is relative (no leading '/') it will start from remote Users homedir. An empty path will be replaced with './'.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.host\fR" 6
.RS
Type: str       Allowed Values: IP or domain address
.br
Remote host used for mode 'ssh' and 'ssh_encfs'.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.port\fR" 6
.RS
Type: int       Allowed Values: 0-65535
.br
SSH Port on remote host.
.PP
Default: 22
.RE

.IP "\fIprofile<N>.snapshots.ssh.user\fR" 6
.RS
Type: str       Allowed Values: text
.br
Remote SSH user.
.PP
Default: local users name
.RE

.IP "\fIprofile<N>.snapshots.ssh.cipher\fR" 6
.RS
Type: str       Allowed Values: default | aes192-cbc | aes256-cbc | aes128-ctr | aes192-ctr | aes256-ctr | arcfour | arcfour256 | arcfour128 | aes128-cbc | 3des-cbc | blowfish-cbc | cast128-cbc
.br
Cipher that is used for encrypting the SSH tunnel. Depending on the environment (network bandwidth, cpu and hdd performance) a different cipher might be faster.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.private_key_file\fR" 6
.RS
Type: str       Allowed Values: absolute path to private key file
.br
Private key file used for password-less authentication on remote host.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.proxy_host\fR" 6
.RS
Type: str       Allowed Values: IP or domain address
.br
Proxy host (or jump host) used to connect to remote host.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.proxy_port\fR" 6
.RS
Type: int       Allowed Values: 0-65535
.br
Port of SSH proxy (jump) host used to connect to remote host.
.PP
Default: 22
.RE

.IP "\fIprofile<N>.snapshots.ssh.proxy_user\fR" 6
.RS
Type: str       Allowed Values: text
.br
SSH user at proxy (jump) host.
.PP
Default: local users name
.RE

.IP "\fIprofile<N>.snapshots.ssh.max_arg_length\fR" 6
.RS
Type: int       Allowed Values: 0, >700
.br
Maximum command length of commands run on remote host. This can be tested for all ssh profiles in the configuration with 'python3 /usr/share/backintime/common/sshMaxArg.py LENGTH'. The value '0' means unlimited length.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.check_commands\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Check if all commands (used during takeSnapshot) work like expected on the remote host.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.check_ping\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Check if the remote host is available before trying to mount.
.PP

.RE

.IP "\fIprofile<N>.snapshots.local_encfs.path\fR" 6
.RS
Type: Path      Allowed Values: absolute path
.br
Where to save snapshots in mode 'local_encfs'.
.PP

.RE

.IP "\fIprofile<N>.snapshots.password.save\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Save password to system keyring (gnome-keyring or kwallet).
.PP

.RE

.IP "\fIprofile<N>.snapshots.password.use_cache\fR" 6
.RS
Type: None      Allowed Values: true|false
.br
Cache password in RAM so it can be read by cronjobs. Security issue: root might be able to read that password, too.
.PP
Default: see #1855
.RE

.IP "\fIprofile<N>.snapshots.exclude.bysize.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Enable exclude files by size.
.PP

.RE

.IP "\fIprofile<N>.snapshots.exclude.bysize.value\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Exclude files bigger than value in MiB. With 'Full rsync mode' disabled this will only affect new files because for rsync this is a transfer option, not an exclude option. So big files that has been backed up before will remain in snapshots even if they had changed.
.PP

.RE

.IP "\fIprofile<N>.schedule.mode\fR" 6
.RS
Type: int       Allowed Values: 0|1|2|4|7|10|12|14|16|18|19|20|25|27|30|40|80
.br
Which schedule used for crontab. The crontab entry will be generated with 'backintime check-config'. 0 = Disabled 1 = at every boot 2 = every 5 minute 4 = every 10 minute 7 = every 30 minute 10 = every hour 12 = every 2 hours 14 = every 4 hours 16 = every 6 hours 18 = every 12 hours 19 = custom defined hours 20 = every day 25 = daily anacron 27 = when drive get connected 30 = every week 40 = every month 80 = every year
.PP

.RE

.IP "\fIprofile<N>.schedule.debug\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Enable debug output to system log for schedule mode.
.PP

.RE

.IP "\fIprofile<N>.schedule.time\fR" 6
.RS
Type: int       Allowed Values: 0-2400
.br
Position-coded number with the format "hhmm" to specify the hour and minute the cronjob should start (eg. 2015 means a quarter past 8pm). Leading zeros can be omitted (eg. 30 = 0030). Only valid for Iprofile<N>.schedule.modeR = 20 (daily), 30 (weekly), 40 (monthly) and 80 (yearly).
.PP

.RE

.IP "\fIprofile<N>.schedule.day\fR" 6
.RS
Type: int       Allowed Values: 1-28
.br
Which day of month the cronjob should run? Only valid for Iprofile<N>.schedule.modeR >= 40.
.PP

.RE

.IP "\fIprofile<N>.schedule.weekday\fR" 6
.RS
Type: int       Allowed Values: 1 (monday) to 7 (sunday)
.br
Which day of week the cronjob should run? Only valid for Iprofile<N>.schedule.modeR = 30.
.PP

.RE

.IP "\fIprofile<N>.schedule.custom_time\fR" 6
.RS
Type: str       Allowed Values: comma separated int (8,12,18,23) or */3;8,12,18,23
.br
Custom hours for cronjob. Only valid for Iprofile<N>.schedule.modeR = 19
.PP

.RE

.IP "\fIprofile<N>.schedule.repeatedly.period\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
How many units to wait between new snapshots with anacron? Only valid for Iprofile<N>.schedule.modeR = 25|27.
.PP

.RE

.IP "\fIprofile<N>.schedule.repeatedly.unit\fR" 6
.RS
Type: int       Allowed Values: 10|20|30|40
.br
Units to wait between new snapshots with anacron. 10 = hours 20 = days 30 = weeks 40 = months Only valid for Iprofile<N>.schedule.modeR = 25|27;
.PP

.RE

.IP "\fIprofile<N>.snapshots.remove_old_snapshots.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Remove all snapshots older than value + unit.
.PP

.RE

.IP "\fIprofile<N>.snapshots.remove_old_snapshots.value\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Snapshots older than this times units will be removed.
.PP

.RE

.IP "\fIprofile<N>.snapshots.remove_old_snapshots.unit\fR" 6
.RS
Type: TimeUnit  Allowed Values: 20|30|80
.br
Time unit to use to calculate removing of old snapshots. 20 = days; 30 = weeks; 80 = years
.PP

.RE

.IP "\fIprofile<N>.snapshots.min_free_space.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Remove snapshots until Iprofile<N>.snapshots.min_free_space.valueR free space is reached.
.PP

.RE

.IP "\fIprofile<N>.snapshots.min_free_space.value\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Keep at least value + unit free space.
.PP

.RE

.IP "\fIprofile<N>.snapshots.min_free_space.unit\fR" 6
.RS
Type: StorageSizeUnitAllowed Values: 10|20
.br
10 = MB 20 = GB
.PP

.RE

.IP "\fIprofile<N>.snapshots.min_free_inodes.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Remove snapshots until Iprofile<N>.snapshots.min_free_inodes.valueR #?free inodes in % is reached.
.PP

.RE

.IP "\fIprofile<N>.snapshots.min_free_inodes.value\fR" 6
.RS
Type: int       Allowed Values: 1-15
.br
Keep at least value % free inodes.
.PP

.RE

.IP "\fIprofile<N>.snapshots.dont_remove_named_snapshots\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Keep snapshots with names during smart_remove.
.PP

.RE

.IP "\fIprofile<N>.snapshots.smart_remove\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run smart_remove to clean up old snapshots after a new snapshot was created.
.PP

.RE

.IP "\fIprofile<N>.snapshots.smart_remove.keep_all\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Keep all snapshots for X days.
.PP

.RE

.IP "\fIprofile<N>.snapshots.smart_remove.keep_one_per_day\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Keep one snapshot per day for X days.
.PP

.RE

.IP "\fIprofile<N>.snapshots.smart_remove.keep_one_per_week\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Keep one snapshot per week for X weeks.
.PP

.RE

.IP "\fIprofile<N>.snapshots.smart_remove.keep_one_per_month\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Keep one snapshot per month for X months.
.PP

.RE

.IP "\fIprofile<N>.snapshots.smart_remove.run_remote_in_background\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
If using modes SSH or SSH-encrypted, run smart_remove in background on remote machine
.PP

.RE

.IP "\fIprofile<N>.snapshots.notify.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Display notifications (errors, warnings) through libnotify or DBUS.
.PP

.RE

.IP "\fIprofile<N>.snapshots.backup_on_restore.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Rename existing files before restore into FILE.backup.YYYYMMDD
.PP

.RE

.IP "\fIprofile<N>.snapshots.cron.nice\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run cronjobs with 'nice \-n19'. This will give Back In Time the lowest CPU priority to not interrupt any other working process.
.PP

.RE

.IP "\fIprofile<N>.snapshots.cron.ionice\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run cronjobs with 'ionice \-c2 \-n7'. This will give Back In Time the owest IO bandwidth priority to not interrupt any other working process.
.PP

.RE

.IP "\fIprofile<N>.snapshots.user_backup.ionice\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run Back In Time with 'ionice \-c2 \-n7' when taking a manual snapshot. This will give Back In Time the lowest IO bandwidth priority to not interrupt any other working process.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.nice\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run rsync and other commands on remote host with 'nice \-n19'.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.ionice\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run rsync and other commands on remote host with 'ionice \-c2 \-n7'.
.PP

.RE

.IP "\fIprofile<N>.snapshots.local.nocache\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run rsync on local machine with 'nocache'. This will prevent files from being cached in memory.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.nocache\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Run rsync on remote host with 'nocache'. This will prevent files from being cached in memory.
.PP

.RE

.IP "\fIprofile<N>.snapshots.cron.redirect_stdout\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Redirect stdout to /dev/null in cronjobs.
.PP

.RE

.IP "\fIprofile<N>.snapshots.cron.redirect_stderr\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Redirect stderr to /dev/null in cronjobs.
.PP

.RE

.IP "\fIprofile<N>.snapshots.bwlimit.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Limit rsync bandwidth usage over network. Use this with mode SSH. For mode Local you should rather use ionice.
.PP

.RE

.IP "\fIprofile<N>.snapshots.bwlimit.value\fR" 6
.RS
Type: int       Allowed Values: 0-99999
.br
Bandwidth limit in KB/sec.
.PP

.RE

.IP "\fIprofile<N>.snapshots.no_on_battery\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Don't take snapshots if the Computer runs on battery.
.PP

.RE

.IP "\fIprofile<N>.snapshots.preserve_acl\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Preserve Access Control Lists (ACL). The source and destination systems must have compatible ACL entries for this option to work properly.
.PP

.RE

.IP "\fIprofile<N>.snapshots.preserve_xattr\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Preserve extended attributes (xattr).
.PP

.RE

.IP "\fIprofile<N>.snapshots.copy_unsafe_links\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
This tells rsync to copy the referent of symbolic links that point outside the copied tree. Absolute symlinks are also treated like ordinary files.
.PP

.RE

.IP "\fIprofile<N>.snapshots.copy_links\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
When symlinks are encountered, the item that they point to (the reference) is copied, rather than the symlink.
.PP

.RE

.IP "\fIprofile<N>.snapshots.one_file_system\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Use rsync's "--one-file-system" to avoid crossing filesystem boundaries when recursing.
.PP

.RE

.IP "\fIprofile<N>.snapshots.rsync_options.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Past additional options to rsync
.PP

.RE

.IP "\fIprofile<N>.snapshots.rsync_options.value\fR" 6
.RS
Type: str       Allowed Values: text
.br
Rsync options. Options must be quoted e.g. \-\-exclude-from="/path/to/my exclude file".
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.prefix.enabled\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Add prefix to every command which run through SSH on remote host.
.PP

.RE

.IP "\fIprofile<N>.snapshots.ssh.prefix.value\fR" 6
.RS
Type: str       Allowed Values: text
.br
Prefix to run before every command on remote host. Variables need to be escaped with \\$FOO. This doesn't touch rsync. So to add a prefix for rsync use Iprofile<N>.snapshots.rsync_options.valueR with --rsync-path="FOO=bar:\\$FOO /usr/bin/rsync"
.PP

.RE

.IP "\fIprofile<N>.snapshots.continue_on_errors\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Continue on errors. This will keep incomplete snapshots rather than deleting and start over again.
.PP

.RE

.IP "\fIprofile<N>.snapshots.use_checksum\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Use checksum to detect changes rather than size + time.
.PP

.RE

.IP "\fIprofile<N>.snapshots.log_level\fR" 6
.RS
Type: int       Allowed Values: 1-3
.br
Log level used during takeSnapshot. 1 = Error 2 = Changes 3 = Info.
.PP

.RE

.IP "\fIprofile<N>.snapshots.take_snapshot_regardless_of_changes\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Create a new snapshot regardless if there were changes or not.
.PP

.RE

.IP "\fIprofile<N>.global.use_flock\fR" 6
.RS
Type: bool      Allowed Values: true|false
.br
Prevent multiple snapshots (from different profiles or users) to be run at the same time.
.PP

.RE

.SH SEE ALSO
.BR backintime (1),
.BR backintime-qt (1)
.PP
Back In Time also has a website: https://github.com/bit-team/backintime
.SH AUTHOR
This manual page was written by the Back In Time Team (<bit-dev@python.org>).
